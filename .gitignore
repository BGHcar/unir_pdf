import streamlit as st
from PyPDF2 import PdfMerger, PdfReader, PdfWriter
import io
import os
from datetime import datetime

st.set_page_config(
    page_title="PDF Toolkit - Unir, Dividir y Eliminar P√°ginas",
    page_icon="üìÑ",
    layout="wide"
)

# Funci√≥n para procesar un PDF individual (eliminar p√°ginas)
def process_single_pdf(pdf_file, pages_to_remove):
    pdf_reader = PdfReader(pdf_file)
    pdf_writer = PdfWriter()
    
    total_pages = len(pdf_reader.pages)
    pages_to_keep = [i for i in range(total_pages) if i not in pages_to_remove]
    
    for page_num in pages_to_keep:
        pdf_writer.add_page(pdf_reader.pages[page_num])
    
    # Guardar PDF procesado en memoria
    buffer = io.BytesIO()
    pdf_writer.write(buffer)
    buffer.seek(0)
    
    return buffer, total_pages, len(pages_to_keep)

# Funci√≥n para unir PDFs ya procesados
def merge_processed_pdfs(processed_pdfs):
    merger = PdfMerger()
    
    for pdf_buffer in processed_pdfs:
        merger.append(pdf_buffer)
    
    # Guardar PDF unido en memoria
    merged_buffer = io.BytesIO()
    merger.write(merged_buffer)
    merger.close()
    merged_buffer.seek(0)
    
    return merged_buffer

# Funci√≥n para dividir PDF
def split_pdf(pdf_file, split_option, custom_ranges=None):
    pdf_reader = PdfReader(pdf_file)
    total_pages = len(pdf_reader.pages)
    
    if split_option == "todas":
        # Crear un PDF por cada p√°gina
        pdf_files = []
        for page_num in range(total_pages):
            pdf_writer = PdfWriter()
            pdf_writer.add_page(pdf_reader.pages[page_num])
            
            buffer = io.BytesIO()
            pdf_writer.write(buffer)
            buffer.seek(0)
            pdf_files.append(buffer)
        
        return pdf_files
    
    elif split_option == "rango_personalizado" and custom_ranges:
        # Dividir seg√∫n rangos personalizados
        pdf_files = []
        for range_str in custom_ranges:
            pdf_writer = PdfWriter()
            
            if '-' in range_str:
                start, end = map(int, range_str.split('-'))
                start = max(1, start) - 1
                end = min(total_pages, end)
                
                for page_num in range(start, end):
                    pdf_writer.add_page(pdf_reader.pages[page_num])
            else:
                page_num = int(range_str) - 1
                if 0 <= page_num < total_pages:
                    pdf_writer.add_page(pdf_reader.pages[page_num])
            
            buffer = io.BytesIO()
            pdf_writer.write(buffer)
            buffer.seek(0)
            pdf_files.append(buffer)
        
        return pdf_files
    
    return []

# Funci√≥n para parsear p√°ginas
def parse_pages_input(pages_input, total_pages=None):
    pages_to_remove = set()
    if not pages_input.strip():
        return pages_to_remove
    
    parts = pages_input.split(',')
    
    for part in parts:
        part = part.strip()
        if '-' in part:
            try:
                start, end = map(int, part.split('-'))
                # Ajustar a √≠ndice 0-based y validar
                start_idx = max(0, start - 1)
                end_idx = end  # end es exclusivo en range
                if total_pages:
                    end_idx = min(end_idx, total_pages)
                pages_to_remove.update(range(start_idx, end_idx))
            except ValueError:
                continue
        else:
            try:
                page_num = int(part) - 1
                if total_pages is None or (0 <= page_num < total_pages):
                    pages_to_remove.add(page_num)
            except ValueError:
                continue
    
    return pages_to_remove

# Interfaz principal
st.title("üìÑ PDF Toolkit - Unir, Dividir y Eliminar P√°ginas")
st.markdown("Una herramienta completa para manipular archivos PDF")

# Crear pesta√±as
tab1, tab2 = st.tabs(["üîó Unir y Eliminar P√°ginas", "‚úÇÔ∏è Dividir PDF"])

with tab1:
    st.header("Unir PDFs y Eliminar P√°ginas")
    
    uploaded_files = st.file_uploader(
        "Selecciona los archivos PDF a unir",
        type="pdf",
        accept_multiple_files=True,
        help="Puedes seleccionar m√∫ltiples archivos PDF"
    )
    
    if uploaded_files:
        st.subheader("üìã Configurar p√°ginas a eliminar por cada PDF")
        
        # Diccionario para almacenar las p√°ginas a eliminar de cada archivo
        pages_to_remove_per_file = {}
        processed_files_info = []
        
        # Crear una secci√≥n para cada archivo
        for i, file in enumerate(uploaded_files):
            # Reiniciar la posici√≥n del archivo para leerlo
            file.seek(0)
            pdf_reader = PdfReader(file)
            total_pages = len(pdf_reader.pages)
            
            with st.expander(f"üìÑ {file.name} ({total_pages} p√°ginas)", expanded=True):
                col1, col2 = st.columns([2, 1])
                
                with col1:
                    pages_input = st.text_input(
                        f"P√°ginas a eliminar de {file.name}",
                        key=f"pages_{i}",
                        placeholder=f"Ej: 1,3,5-7 (de {total_pages} p√°ginas totales)",
                        help=f"Eliminar p√°ginas antes de unir. PDF tiene {total_pages} p√°ginas."
                    )
                
                with col2:
                    # Mostrar informaci√≥n del archivo
                    st.metric("Total p√°ginas", total_pages)
                    
                    # Previsualizaci√≥n de lo que se eliminar√°
                    if pages_input:
                        pages_to_remove = parse_pages_input(pages_input, total_pages)
                        pages_to_remove_per_file[file.name] = pages_to_remove
                        st.metric("P√°ginas a eliminar", len(pages_to_remove))
                        st.metric("P√°ginas que quedar√°n", total_pages - len(pages_to_remove))
                        
                        if pages_to_remove:
                            st.info(f"Eliminar: {', '.join(map(str, sorted([p+1 for p in pages_to_remove])))}")
                    else:
                        st.metric("P√°ginas a eliminar", 0)
                        st.metric("P√°ginas que quedar√°n", total_pages)
        
        # Bot√≥n de procesamiento
        if st.button("üîÑ Procesar y Unir PDFs", type="primary", key="merge_button"):
            if uploaded_files:
                try:
                    with st.spinner("Procesando PDFs individualmente y uniendo..."):
                        processed_pdfs = []
                        total_stats = {
                            'original_pages': 0,
                            'removed_pages': 0,
                            'final_pages': 0,
                            'processed_files': 0
                        }
                        
                        # Procesar cada PDF individualmente
                        for i, file in enumerate(uploaded_files):
                            file.seek(0)
                            
                            # Obtener p√°ginas a eliminar para este archivo
                            pages_input = st.session_state.get(f"pages_{i}", "")
                            pages_to_remove = parse_pages_input(pages_input)
                            
                            # Procesar el PDF individual
                            processed_pdf, original_pages, final_pages = process_single_pdf(file, pages_to_remove)
                            
                            processed_pdfs.append(processed_pdf)
                            total_stats['original_pages'] += original_pages
                            total_stats['removed_pages'] += len(pages_to_remove)
                            total_stats['final_pages'] += final_pages
                            total_stats['processed_files'] += 1
                        
                        # Unir todos los PDFs procesados
                        final_pdf = merge_processed_pdfs(processed_pdfs)
                        
                        # Mostrar resultado
                        st.success("‚úÖ PDFs procesados y unidos correctamente!")
                        
                        # Estad√≠sticas detalladas
                        st.subheader("üìä Resumen del Procesamiento")
                        col1, col2, col3, col4 = st.columns(4)
                        with col1:
                            st.metric("Archivos procesados", total_stats['processed_files'])
                        with col2:
                            st.metric("P√°ginas originales", total_stats['original_pages'])
                        with col3:
                            st.metric("P√°ginas eliminadas", total_stats['removed_pages'])
                        with col4:
                            st.metric("P√°ginas finales", total_stats['final_pages'])
                        
                        # Bot√≥n de descarga
                        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                        st.download_button(
                            label="üì• Descargar PDF Procesado",
                            data=final_pdf,
                            file_name=f"pdf_unido_{timestamp}.pdf",
                            mime="application/pdf",
                            type="primary"
                        )
                        
                except Exception as e:
                    st.error(f"‚ùå Error al procesar los PDFs: {str(e)}")

with tab2:
    st.header("‚úÇÔ∏è Dividir PDF")
    
    uploaded_file_split = st.file_uploader(
        "Selecciona el PDF a dividir",
        type="pdf",
        key="split_uploader"
    )
    
    if uploaded_file_split:
        uploaded_file_split.seek(0)
        pdf_reader = PdfReader(uploaded_file_split)
        total_pages = len(pdf_reader.pages)
        
        st.info(f"üìÑ **{uploaded_file_split.name}** - {total_pages} p√°ginas")
        
        split_option = st.radio(
            "C√≥mo quieres dividir el PDF:",
            ["todas", "rango_personalizado"],
            format_func=lambda x: "Dividir en p√°ginas individuales" if x == "todas" else "Dividir por rangos personalizados"
        )
        
        if split_option == "rango_personalizado":
            st.subheader("Configurar rangos de divisi√≥n")
            ranges_input = st.text_area(
                "Especifica los rangos de p√°ginas (uno por l√≠nea):",
                placeholder="Ejemplo:\n1-3\n4-5\n6\n7-10",
                help="Cada l√≠nea ser√° un PDF separado. Usa formato: 1-3, 4, 5-7, etc."
            )
        
        if st.button("‚úÇÔ∏è Dividir PDF", type="primary", key="split_button"):
            try:
                with st.spinner("Dividiendo PDF..."):
                    if split_option == "todas":
                        pdf_files = split_pdf(uploaded_file_split, "todas")
                        st.success(f"‚úÖ PDF dividido en {len(pdf_files)} archivos individuales!")
                        
                        # Crear ZIP si hay muchos archivos
                        if len(pdf_files) > 1:
                            import zipfile
                            zip_buffer = io.BytesIO()
                            with zipfile.ZipFile(zip_buffer, 'w') as zip_file:
                                for i, pdf_buffer in enumerate(pdf_files):
                                    zip_file.writestr(f"pagina_{i+1}.pdf", pdf_buffer.getvalue())
                            zip_buffer.seek(0)
                            
                            st.download_button(
                                label="üì¶ Descargar todos como ZIP",
                                data=zip_buffer,
                                file_name="paginas_divididas.zip",
                                mime="application/zip"
                            )
                        
                        # Tambi√©n permitir descargar individualmente
                        st.subheader("Descargar p√°ginas individualmente:")
                        cols = st.columns(3)
                        for i, pdf_buffer in enumerate(pdf_files):
                            with cols[i % 3]:
                                st.download_button(
                                    label=f"üìÑ P√°gina {i+1}",
                                    data=pdf_buffer,
                                    file_name=f"pagina_{i+1}.pdf",
                                    mime="application/pdf"
                                )
                    
                    elif split_option == "rango_personalizado" and ranges_input:
                        ranges_list = [r.strip() for r in ranges_input.split('\n') if r.strip()]
                        pdf_files = split_pdf(uploaded_file_split, "rango_personalizado", ranges_list)
                        st.success(f"‚úÖ PDF dividido en {len(pdf_files)} archivos!")
                        
                        # Descargar individualmente
                        st.subheader("Descargar archivos divididos:")
                        for i, (range_str, pdf_buffer) in enumerate(zip(ranges_list, pdf_files)):
                            st.download_button(
                                label=f"üìÑ Rango: {range_str}",
                                data=pdf_buffer,
                                file_name=f"rango_{range_str.replace('-', '_')}.pdf",
                                mime="application/pdf",
                                key=f"split_{i}"
                            )
            
            except Exception as e:
                st.error(f"‚ùå Error al dividir el PDF: {str(e)}")

# Instrucciones
with st.expander("üìñ Instrucciones de uso"):
    st.markdown("""
    ### üîó Unir y Eliminar P√°ginas:
    1. **Cargar PDFs**: Selecciona m√∫ltiples archivos PDF
    2. **Configurar cada PDF**: Para cada archivo, especifica qu√© p√°ginas eliminar ANTES de unir
    3. **Formato de p√°ginas**: Usa:
       - P√°ginas individuales: `1,3,5`
       - Rangos: `2-4`
       - Combinaci√≥n: `1,3,5-7`
    4. **Procesar**: Los PDFs se procesan individualmente y luego se unen

    ### ‚úÇÔ∏è Dividir PDF:
    1. **Cargar PDF**: Selecciona un archivo PDF
    2. **Elegir modo**:
       - **P√°ginas individuales**: Crea un PDF por cada p√°gina
       - **Rangos personalizados**: Divide en grupos espec√≠ficos de p√°ginas
    3. **Especificar rangos** (si aplica): Un rango por l√≠nea, ej: `1-3`, `4`, `5-7`
    4. **Dividir**: Descarga los archivos resultantes

    **Nota**: Todos los procesamientos se hacen en memoria, tus archivos est√°n seguros.
    """)

# Pie de p√°gina
st.markdown("---")
st.markdown("Creado con Streamlit y PyPDF2 ‚Ä¢ Tus archivos se procesan localmente")